diff -urN gnome-system-monitor-3.14.1.old/src/application.cpp gnome-system-monitor-3.14.1/src/application.cpp
--- gnome-system-monitor-3.14.1.old/src/application.cpp	2014-07-20 05:42:35.000000000 +0100
+++ gnome-system-monitor-3.14.1/src/application.cpp	2015-05-01 14:37:41.481021725 +0100
@@ -101,7 +101,7 @@
             g_variant_builder_add_value ( &builder, child);
             g_variant_unref (child);
         } else {
-            color = g_strdup ("#f25915e815e8");
+            color = procman::generate_random_color();
             g_variant_builder_add(&builder, "(us)", i, color);
         }
         gdk_rgba_parse(&app->config.cpu_color[i], color);
diff -urN gnome-system-monitor-3.14.1.old/src/interface.cpp gnome-system-monitor-3.14.1/src/interface.cpp
--- gnome-system-monitor-3.14.1.old/src/interface.cpp	2014-07-21 20:42:00.000000000 +0100
+++ gnome-system-monitor-3.14.1/src/interface.cpp	2015-05-01 14:35:40.173163771 +0100
@@ -178,7 +178,7 @@
     GtkWidget *picker_alignment;
     LoadGraph *cpu_graph, *mem_graph, *net_graph;
 
-    gint i;
+    gint i, rows_n;
     gchar *title_text;
     gchar *label_text;
     gchar *title_template;
@@ -197,8 +197,16 @@
                         TRUE,
                         0);
 
-    GtkWidget* cpu_table = GTK_WIDGET (gtk_builder_get_object (builder, "cpu_table"));
     gint cols = 4;
+    rows_n = std::max(app->config.num_cpus / cols, 1);
+
+    GtkWidget* cpu_table = GTK_WIDGET (gtk_builder_get_object (builder, "cpu_table"));
+    if (rows_n > 2) {
+        GtkWidget *scrolled_window = gtk_scrolled_window_new(NULL, NULL);
+        gtk_widget_reparent(cpu_table, scrolled_window);
+        gtk_box_pack_end (GTK_BOX (cpu_graph_box), scrolled_window, TRUE, TRUE, 0);
+    }
+
     for (i=0;i<app->config.num_cpus; i++) {
         GtkWidget *temp_hbox;
 
diff -urN gnome-system-monitor-3.14.1.old/src/util.cpp gnome-system-monitor-3.14.1/src/util.cpp
--- gnome-system-monitor-3.14.1.old/src/util.cpp	2014-07-21 20:42:00.000000000 +0100
+++ gnome-system-monitor-3.14.1/src/util.cpp	2015-05-01 14:37:41.481021725 +0100
@@ -363,7 +363,85 @@
     g_free(msg);
 }
 
-
+/* taken from gtk+/gtk/gtkstyle.c */
+static void
+hls_to_rgb (gdouble *h,
+            gdouble *l,
+            gdouble *s)
+{
+  gdouble hue;
+  gdouble lightness;
+  gdouble saturation;
+  gdouble m1, m2;
+  gdouble r, g, b;
+
+  lightness = *l;
+  saturation = *s;
+
+  if (lightness <= 0.5)
+    m2 = lightness * (1 + saturation);
+  else
+    m2 = lightness + saturation - lightness * saturation;
+  m1 = 2 * lightness - m2;
+
+  if (saturation == 0)
+    {
+      *h = lightness;
+      *l = lightness;
+      *s = lightness;
+    }
+  else
+    {
+      hue = *h + 120;
+      while (hue > 360)
+        hue -= 360;
+      while (hue < 0)
+        hue += 360;
+
+      if (hue < 60)
+        r = m1 + (m2 - m1) * hue / 60;
+      else if (hue < 180)
+        r = m2;
+      else if (hue < 240)
+        r = m1 + (m2 - m1) * (240 - hue) / 60;
+      else
+        r = m1;
+
+      hue = *h;
+      while (hue > 360)
+        hue -= 360;
+      while (hue < 0)
+        hue += 360;
+
+      if (hue < 60)
+        g = m1 + (m2 - m1) * hue / 60;
+      else if (hue < 180)
+        g = m2;
+      else if (hue < 240)
+        g = m1 + (m2 - m1) * (240 - hue) / 60;
+      else
+        g = m1;
+
+      hue = *h - 120;
+      while (hue > 360)
+        hue -= 360;
+      while (hue < 0)
+        hue += 360;
+
+      if (hue < 60)
+        b = m1 + (m2 - m1) * hue / 60;
+      else if (hue < 180)
+        b = m2;
+      else if (hue < 240)
+        b = m1 + (m2 - m1) * (240 - hue) / 60;
+      else
+        b = m1;
+
+      *h = r;
+      *l = g;
+      *s = b;
+    }
+}
 
 namespace procman
 {
@@ -647,6 +725,28 @@
         return procman::format_rate(rate, max_rate, GsmApplication::get()->config.network_in_bits);
     }
 
+
+    gchar *generate_random_color (void)
+    {
+        GdkColor color;
+        gdouble h, l, s;
+
+        h = g_random_int_range(0, 255);
+        /* Clip luma, as we don't want colors too light (unreadable on a white
+         * bg. */
+        l = g_random_int_range(0, 224);
+        s = g_random_int_range(0, 255);
+
+        hls_to_rgb(&h, &l, &s);
+
+        color.red = h * 255;
+        color.green = l * 255;
+        color.blue = s * 255;
+
+        return gdk_color_to_string(&color);
+    }
+
+
 }
 
 gchar *
diff -urN gnome-system-monitor-3.14.1.old/src/util.h gnome-system-monitor-3.14.1/src/util.h
--- gnome-system-monitor-3.14.1.old/src/util.h	2014-07-20 05:42:35.000000000 +0100
+++ gnome-system-monitor-3.14.1/src/util.h	2015-05-01 14:37:41.485021820 +0100
@@ -127,6 +127,8 @@
 
     std::string format_network(guint64 rate, guint64 max_rate = 0);
     std::string format_network_rate(guint64 rate, guint64 max_rate = 0);
+
+    gchar *generate_random_color (void);
 }
 
 #endif /* _GSM_UTIL_H_ */
